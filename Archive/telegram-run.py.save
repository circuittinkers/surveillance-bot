import threading
import json
from telegram.ext import CommandHandler, Updater, MessageHandler, Filters
import time
import datetime
import argparse
import warnings

# init entry parser
res = []
seen = set()

def add_entry(res, name, user_id):
	# check if in seen set
	if (name, user_id) in seen:
		return res

	# add to seen set
	seen.add(tuple([name, user_id]))

	# append to result list
	res.append({name: user_id})

	return res

def write_to_json(list, fn):
	with open(fn, 'w', encoding='utf-8') as file:
		for item in list:
			x = json.dumps(item, indent=4)
			file.write(x + '\n')
	res = []

# construct arg parser
ap = argparse.ArgumentParser()
ap.add_argument("-c", "--conf", required=True,
	help="path to JSON configuration file")
ap.add_argument("-s", "--subs", required=True,
	help="path to JSON subscriber list file")
args = vars(ap.parse_args())

# filter warning and load config
warnings.filterwarnings("ignore")
conf = json.load(open(args["conf"]))

# load telegram client
client = Updater(token=conf["telegram_access_token"], use_context=True)
dispatcher = client.dispatcher

def start(update, context):
	context.bot.send_message(chat_id= update.effective_chat.id,
		text="Hi, Welcome to Surveillance Alert Bot!")

def unknown(update, context):
	context.bot.send_message(chat_id= update.effective_chat.id,
		text="Sorry, I didn't understand that. / Saya tidak faham")

def stop(update, context):
	context.bot.send_message(chat_id = update.effective_chat.id,
		text="Halting my internal process... Goodbye!")
	threading.Thread(target=shutdown).start()

def shutdown():
	client.stop()
	client.is_idle = False

def alarm(update, context):
	context.bot.send_message(chat_id= update.effective_chat.id,
		text="Noted. Triggering alarm...")

def subscribe(update, context):
	# check if user id exist
	user_id = update.effective_user.id
	exist = False
	subs = json.load(open(args["subs"]))
	print("Current subs: {}".format(subs))
	for list in subs:
		if subs[list] == user_id:
			context.bot.send_message(chat_id= update.effective_chat.id,
				text="You already subscribed! /unsubscribe to stop")
			exist = True
			continue

	if not exist:
		name = update.effective_user.first_name
		s_args = [name, user_id]
		add
		write_to_json(res, args["subs"])
		print("Subscribing with data: {}".format(s_args))
		context.bot.send_message(chat_id= update.effective_chat.id,
			text="You have been subscribed to new alerts!".format(update.effective_user.id))

unknown_handler = MessageHandler(Filters.command, unknown)
start_handler = CommandHandler('start', start)
subscribe_handler = CommandHandler('subscribe', subscribe)
stop_handler = CommandHandler('stop', stop)

dispatcher.add_handler(start_handler)
dispatcher.add_handler(stop_handler)
dispatcher.add_handler(subscribe_handler)
dispatcher.add_handler(unknown_handler)

client.start_polling()
client.idle()
